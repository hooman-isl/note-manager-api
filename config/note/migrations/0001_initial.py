# Generated by Django 5.2.3 on 2025-06-30 20:29

import django.db.models.deletion
import note.utils
import safe_filefield.models
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('description', models.TextField(verbose_name='Description')),
                ('status', models.CharField(choices=[('PV', 'Private'), ('PB', 'Public')], default='PB', max_length=2, verbose_name='Status')),
                ('priority', models.SmallIntegerField(choices=[(1, 'Low'), (2, 'Medium'), (3, 'High')], default=2, verbose_name='Priority')),
                ('is_archived', models.BooleanField(default=False, verbose_name='Archived')),
                ('is_pinned', models.BooleanField(default=False, verbose_name='Pinned')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('edited_at', models.DateTimeField(auto_now=True, verbose_name='Edited At')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Note',
                'verbose_name_plural': 'Notes',
            },
        ),
        migrations.CreateModel(
            name='NoteFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', safe_filefield.models.SafeFileField(upload_to=note.utils.generate_upload_path, verbose_name='File')),
                ('note', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='note.note', verbose_name='Note')),
            ],
            options={
                'verbose_name': 'Note File',
                'verbose_name_plural': 'Note Files',
            },
        ),
        migrations.CreateModel(
            name='NoteReminder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('due_date', models.DateTimeField(verbose_name='Due Date')),
                ('is_active', models.BooleanField(default=False, verbose_name='Activated')),
                ('note', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='note.note', verbose_name='Note')),
            ],
            options={
                'verbose_name': 'Note Reminder',
                'verbose_name_plural': 'Note Reminders',
            },
        ),
        migrations.AddConstraint(
            model_name='note',
            constraint=models.CheckConstraint(condition=models.Q(('status__in', ['PV', 'PB'])), name='valid_status_choices'),
        ),
        migrations.AddConstraint(
            model_name='note',
            constraint=models.CheckConstraint(condition=models.Q(('priority__gte', 1), ('priority__lte', 3)), name='valid_priority_range'),
        ),
    ]
